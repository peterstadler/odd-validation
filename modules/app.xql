xquery version "3.0";

module namespace app="http://edirom.de/odd-tools/templates";

import module namespace templates="http://exist-db.org/xquery/templates";
import module namespace config="http://edirom.de/odd-tools/config" at "config.xqm";
import module namespace functx="http://www.functx.com";

(:~
 : This is a sample templating function. It will be called by the templating module if
 : it encounters an HTML element with an attribute data-template="app:test" 
 : or class="app:test" (deprecated). The function has to take at least 2 default
 : parameters. Additional parameters will be mapped to matching request or session parameters.
 : 
 : @param $node the HTML node with the attribute which triggered this call
 : @param $model a map containing arbitrary data - used to pass information between template calls
 :)
declare function app:test($node as node(), $model as map(*)) {
    <p>Dummy template output generated by function app:test at {current-dateTime()}. The templating
        function was triggered by the class attribute <code>class="app:test"</code>.</p>
};

declare %templates:wrap function app:tei-schemas($node as node(), $model as map(*)) as map(*) {
    map {
        'tei-schemas' := for $i in xmldb:get-child-resources($config:tei-schema-dir) 
                            order by $i descending
                            return $i
    }
};

declare function app:schema-option($node as node(), $model as map(*)) as xs:string {
     string-join(functx:get-matches($model('tei-schema'), '\d\.\d\.\d'), '')
};

declare function app:fragment($node as node(), $model as map(*)) as element()? {
     if($model('fragment')) then $node
     else ()
};